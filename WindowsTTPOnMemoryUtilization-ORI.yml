---
AWSTemplateFormatVersion: 2010-09-09
Description: |
  Create an Amazon EC2 Auto Scaling group that scales based on custom memory usage metric across Windows fleet
  **WARNING** This template creates Amazon EC2 Auto Scaling group, Amazon EC2 Auto Scaling launch template, System Manager parameter, IAM role and EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template.
#parameters needed for the template
Parameters:
  WinClientAmiID:
    Type: AWS::SSM:Parameter::Value<String>
    Default: CFN-NLB-WinCientAMI-Id
    Description: AMI ID of the WinClient to be used
    AllowedPattern: ami-([0-9a-z]{8}|[0-9a-z]{17}) 
  # KeyPair:
  #   Description: Amazon EC2 Key Pair
  #   Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Default: CFN-NLB-InstanceType
    Type: AWS::SSM:Parameter::Value<String>
    Description: Choose an Instance Type
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of Subnets in your Virtual Private Cloud (VPC). Make sure
      these are public subnets with route to IGW or private subnets with NatGateway
      and all subnets are from the same VPC
  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: The list of Security Groups in your Virtual Private Cloud (VPC).
      Make sure select SecurityGroups in the same VPC.
  MaxSize:
    Default: 4
    Description: Amazon EC2 Auto Scaling group maximum number
    Type: Number
  MinSize:
    Default: 1
    Description: Amazon EC2 Auto Scaling group minimum number
    Type: Number
  DesiredSize:
    Default: 2
    Description: Amazon EC2 Auto Scaling group desired number
    Type: Number
  MemoryPolicyTargetValue:
    Default: 70
    Description: Target value for ASG target tracking policy
    Type: Number
#template created resources
Resources:
#Create SSM parameter Store for CW unified agent configuration on Windows
  SSMParameterStore:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub 'AmazonCloudWatch-Windows-WinClientELB'
      Type: String
      Value: |
        {
            "metrics": {
            "append_dimensions": {
                    "AutoScalingGroupName": "${aws:AutoScalingGroupName}",
                    "InstanceId": "${aws:InstanceId}"
            },
            "aggregation_dimensions" : [["AutoScalingGroupName"]],
            "metrics_collected": {
              "Memory": {
                "measurement": [
                  "% Committed Bytes In Use"
                ],
                "metrics_collection_interval": 60
              },
              "statsd": {
                "metrics_aggregation_interval": 60,
                "metrics_collection_interval": 10,
                "service_address": ":8125"
              }
            }
          }
        }
      Description: SSM Parameter for AmazonCloudWatch Windows fleet.
#create IAM role using CloudWatch Agent Server Policy
  CloudWatchAgentServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CloudWatchAgentServerRole-WinClientELB'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
#Create instance profile
  FleetInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'CloudWatchAgentServerRole-WinClientELB'
      Path: /
      Roles:
        - !Ref 'CloudWatchAgentServerRole'
#Create launch template
  FleetLaunchTemplate:
    # Metadata:
    #   Comment: Install CloudWatch agent
    #   AWS::CloudFormation::Init:
    #     configSets:
    #       All:
    #         - 01-CWAgent
    #         - 02-MemoryUsagePercentageScript
    #         - 03-SetupCfnHup
    #     01-CWAgent:
    #       commands:
    #         1-DownloadCWAgent:
    #           command: powershell -Command "Invoke-WebRequest https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi -OutFile 'c:\\amazon-cloudwatch-agent.msi'"
    #           waitAfterCompletion: 0
    #         2-InstallCWAgent:
    #           command: powershell -Command "msiexec /i 'c:\\amazon-cloudwatch-agent.msi' /quiet | Out-Null"
    #           waitAfterCompletion: 0
    #         3-RemoveCWAgentMSI:
    #           command: powershell -Command "Remove-Item 'c:\\amazon-cloudwatch-agent.msi'"
    #           waitAfterCompletion: 0
    #         4-StopCWAgentService:
    #           command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a stop"
    #           waitAfterCompletion: 0
    #         5-ConfigureCWAgent:
    #           command: !Sub |
    #             powershell -Command "& 'C:\\Program Files\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1' -a fetch-config -m ec2 -s -c ssm:${SSMParameterStore}"
    #           waitAfterCompletion: 0
    #     02-MemoryUsagePercentageScript:
    #       files:
    #         c:\MemoryUsageUtilizationMetric.ps1:
    #           content: |
    #             #IP and Port that StatsD listen to
    #             $ipAddress=[System.Net.IPAddress]::Parse("127.0.0.1")
    #             $port=8125

    #             #Your Custom Metric Name
    #             $MetricName="MemoryUtilization"

    #             #Calculate the percentage for the Memory Utilization (Used Percentage)
    #             $ComputerMemory = Get-WmiObject -ComputerName $env:computername -Class win32_operatingsystem -ErrorAction Stop
    #             $MemoryUtilization=[math]::Round(((($ComputerMemory.TotalVisibleMemorySize - $ComputerMemory.FreePhysicalMemory)*100)/ $ComputerMemory.TotalVisibleMemorySize), 2)

    #             #Formulate the message to send to StatusD 'MetricName:Value|MetricType'
    #             $Message=$MetricName+":"+$MemoryUtilization+"|g"

    #             #Create and UDP Connection endpoint and client
    #             $endPoint=New-Object System.Net.IPEndPoint($ipAddress, $port)
    #             $UDPClient=New-Object System.Net.Sockets.UdpClient

    #             #Encode and send the data to UDP server
    #             $encodedData=[System.Text.Encoding]::ASCII.GetBytes($Message)
    #             $bytesSent=$UDPClient.Send($encodedData,$encodedData.length,$endPoint)

    #             #Close UDP connection
    #             $UDPClient.Close()
    #       commands:
    #         ScheduleTask:
    #           command: powershell -Command "schtasks /create /tn MemoryUtilization /tr 'powershell -NoLogo -WindowStyle hidden -file c:\\Program Files\\Amazon\\AmazonCloudWatchAgent\\MemoryUsageUtilizationMetric.ps1' /sc minute /mo 1 /ru System"
    #           waitAfterCompletion: 0
    #     03-SetupCfnHup:
    #       files:
    #         c:\cfn\cfn-hup.conf:
    #           content: !Sub |
    #             [main]
    #             stack=${AWS::StackId}
    #             region=${AWS::Region}
    #         c:\cfn\hooks.d\cfn-auto-reloader.conf:
    #           content: !Sub |
    #             [cfn-auto-reloader-hook]
    #             triggers=post.update
    #             path=Resources.FleetLaunchTemplate.Metadata.AWS::CloudFormation::Init
    #             action=cfn-init.exe -v --stack ${AWS::StackName} --resource FleetLaunchTemplate --configsets All  --region ${AWS::Region}
    #       services:
    #         windows:
    #           cfn-hup:
    #             enabled: true
    #             ensureRunning: true
    #             files:
    #               - c:\cfn\cfn-hup.conf
    #               - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'AS-CW-Windows-WinClientELB'
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt 'FleetInstanceProfile.Arn'
        ImageId: !Ref 'WinClientAmiID'
        InstanceType: !Ref 'InstanceType'
        # KeyName: !Ref 'KeyPair'
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: false
            DeleteOnTermination: true
            Groups: !Ref 'SecurityGroups'
        # UserData: !Base64
        #   Fn::Sub: |
        #     <powershell>

        #     #Download  helper scripts for windows
        #     Invoke-WebRequest https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-win64-latest.exe -OutFile c:\aws-cfn-bootstrap-py3-win64-latest.exe

        #     #Install helper scripts and wait for the installation to finish
        #     c:\\aws-cfn-bootstrap-py3-win64-latest.exe /unattended /quiet

        #     # Install the files and packages from the metadata
        #     cfn-init.exe -v --stack ${AWS::StackName} --resource FleetLaunchTemplate --configsets All  --region ${AWS::Region}

        #     # Signal the status from cfn-init
        #     cfn-signal.exe -e $lastexitcode --stack ${AWS::StackId} --resource FleetASG --region ${AWS::Region}

        #     </powershell>
#Create ASG using previous created launch template
  FleetASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: !Ref 'MinSize'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredSize'
      LaunchTemplate:
        LaunchTemplateId: !Ref 'FleetLaunchTemplate'
        Version: !GetAtt 'FleetLaunchTemplate.DefaultVersionNumber'
      VPCZoneIdentifier: !Ref 'Subnets'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'DesiredSize'
        Timeout: PT1H
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 2
        PauseTime: PT1M
        WaitOnResourceSignals: true
# Create target tracking policy on custom memory
  MemoryPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'FleetASG'
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        CustomizedMetricSpecification:
          Dimensions:
            - Name: AutoScalingGroupName
              Value: !Ref 'FleetASG'
          MetricName: MemoryUtilization
          Namespace: CWAgent
          Statistic: Average
        TargetValue: !Ref 'MemoryPolicyTargetValue'
